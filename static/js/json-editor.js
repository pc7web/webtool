var timeOutObj, p = [], indentConfig = { tab: { char: "	", size: 1 }, space: { char: " ", size: 4 } }, configDefault = { type: "tab" }, push = function (e) { return "\\" + p.push(e) + "\\" }, pop = function (e, t) { return p[t - 1] }, tabs = function (e, t) { return Array(e + 1).join(t) }; function JSONFormat(e, t) { p = []; var a = "", n = 0; e = e.replace(/\\./g, push).replace(/(".*?"|'.*?')/g, push).replace(/\s+/, ""); for (var r = 0; r < e.length; r++) { var i = e.charAt(r); switch (i) { case "{": case "[": a += i + "\n" + tabs(++n, t); break; case "}": case "]": a += "\n" + tabs(--n, t) + i; break; case ",": a += ",\n" + tabs(n, t); break; case ":": a += ": "; break; default: a += i } } return a.replace(/\[[\d,\s]+?\]/g, function (e) { return e.replace(/\s/g, "") }).replace(/\\(\d+)\\/g, pop).replace(/\\(\d+)\\/g, pop) } function json_formatter(e, t) { var a = indentConfig[(t = t || configDefault).type]; if (null == a) throw Error('Unrecognized indent type: "' + t.type + '"'); var n = Array((t.size || a.size) + 1).join(a.char); return JSONFormat(JSON.stringify(e), n) } function format_data() { clearTimeout(timeOutObj), timeOutObj = setTimeout(() => { let e = document.getElementById("id_data"); if (!e) { let t = prompt("Enter element id: "); if (!(e = document.getElementById(t))) return } try { e.value = json_formatter(JSON.parse(e.value)) } catch (a) { alert(a) } }, 500) } function createEditor() { var e = document.getElementById("id_data"); let t = document.createElement("div"); t.id = "json-editor", e.parentElement.appendChild(t), new Quill("#json-editor", { theme: "snow" }) } contentMainButtons.push({ text: "Format json", do: format_data, at: /add|change/g }), contentMainButtons.push({ text: "Editor", do: createEditor, at: /add|change/g });